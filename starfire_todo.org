* New Next To Do
** Remove OLED stuff, clean up prints
** 1. Remove tick1 tick2 and existing time-out code
** Make start with movement components for maze solver
- would allow to develop controlled l-turn
** Make a simple maze solver
* Older Next To Do
** DONE Add delete to command line interpreter
** TODO Turning cirle
0.5 1.3 is slightly too small - make bigger
70 300 is a quarter
70 1200 is a full circle
** TODO Speeds wrong at start?

// shouldn't these be set_speed????
    L_PWM = max_speed;      //set forward speed for L motor
    R_PWM = max_speed;      //set forward speed for R motor

** DONE Make a square 
- greater that 1 sq., E.G. 2X2 - allow to compensate
- also could do largest square
** DONE Make a line
2x180 degree turns
** Staircase pattern
** DONE Figure out why it doesn't turn left
** DONE Make a turn and spin command?
** Tune left hand turns
** Tune speed 2
** Tune speed 3
** DONE PR1 is being changed - check out usage - do we need to do this?
** tweak movement constants
** DONE implement getch and getche
** more robust serial handling (avoid losing characters)
 - e.g. during pauses (make a serial buffer function)

** DONE allow entry of terminal mode from waiting for run
** quit wall follower mode when key or button is pressed
** allow sensor and/or move mode 
** why does move mode pause?
 - PR is being changed

** Tidy up variables at top - some surely could be local variables?
** [#A] Read C compiler manual - limitations on local variables
** DONE const vs. non-const allocation
** Read language tools manual
** DONE SPI RAM read/write
- would allow logging of complex data quickly
- e.g. speed vs. sensors, etc. 
- PID controller
--- speed and position stablisation

** Warm start vs. power on detection, preserve maze map variable, etc.
** -----------------------------------------------
** 2. Fix indent.
** 3. Test display code
** 4. Figure out if tests works (LBUT / RBUT on start)
** 5. Look at before main loop starts (beginning on main())
** 6. Look at proper running code
** 7. Figure out rest of wall follower code
** 8. Look at sensor code
** 9. Test on track
** 10. Fix wobble
** 11. Look at wall follower
** Switch display controls optionally to BT serial view
*** DONE Program serial terminal changes
*** Test display control changes
*** Any modification required?
** Get all sensors working
*** What sensors are displayed?
*** Add in extra sensor code
*** Test all sensors
* Future To Do
** dsPIC PID control library
** slips on back under of mouse
** Test motors
** DONE Test SPI SRAM
** Test battery
** Check delays with delay variable (volatile required for optimisation?)
** DONE test LEDs
** Program Modes
How do button A, button B, sensors and 3 LEDs interoperate?
*** Wall follower mode
*** Mouse Test mode
- Sensor test read mode?
- motor test read mode?
- battery read mode?
*** Maze solver mode
* Notes
** Maze solver
*** Sensing
*** Modes
- explore mode
*** List of features
- four sensors
- speed control
- position tracking via odemetry
- realignment of position by walls
- left/right centering
- left/right offset calculation
- angle calculation
- diagonal centering
- flood fill maze solver (potentially incremental)
- lost detection
- acceleration control
- sensor calibration process
- target setting
*** Movement
180 turn
smooth left
smooth right
diagonals

*** Order of first features
Wall follower plus
1. Position tracking using odemetry
2. Re-calibration of position using wall edges
3. Mapping
4. Right sensor for right wall detection
5. Left or right position would be nice to know.
- better when two walls 
6. Angled would be nice to know
- when two walls partially possible
- when approaching one wall would indiciate angle
 -- can calculate if you know speed?
    --- or left/right position change over time period
*** Position info
16x16 maze 
0xFFFF max unsigned
each cell = 180mm (168mm betweeen walls)
Approx. 0.6mm per step
steps 300 per cell
But diagnoals, or other headings, mean could be less than that.
if 0.1mm resolution, then cell would be 180*10 = 1800. 

28800 is 16 * 1800. 

if square if 0.6mm, diagonal would be 0.8485mm. 

Would we want position as two entries (of cell offset plus cell position) 
or single X and Y.

Two entries would avoid divides for looking up in map.

Position could be average of two week odemetry, avoid angle to some extent 
for going down corridors.

*** Sensor calibration idea
MODE 1: cal-ex
Put mouse at back wall, in the center.
Move forward slowly 34mm or 60 (34/0.6) steps
 (Mouse is about 100mm long, inside is 180-12 = 168mm. Therefore movement is 168mm-100mm/2)
Rotate 360 degrees slowly
Record sensor readings (maybe into SPI RAM) and rotation angle
Stream out to serial port to allow spreadsheet analysis

MODE 2: cal

As per mode 1, but without streaming. 
We know distances of the walls during rotation. Use this to calibrate sensors.
* Done
