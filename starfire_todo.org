* Next To Do
** TODO Turning cirle
0.5 1.3 is slightly too small - make bigger
70 300 is a quarter
70 1200 is a full circle
** TODO Speeds wrong at start?

// shouldn't these be set_speed????
    L_PWM = max_speed;      //set forward speed for L motor
    R_PWM = max_speed;      //set forward speed for R motor

** DONE Make a square 
- greater that 1 sq., E.G. 2X2 - allow to compensate
- also could do largest square
** DONE Make a line
2x180 degree turns
** Staircase pattern
** Make start with movement components for maze solver
- would allow to develop controlled l-turn
** DONE Figure out why it doesn't turn left
** DONE Make a turn and spin command?
** Tune left hand turns
** Tune speed 2
** Tune speed 3
** PR1 is being changed - check out usage - do we need to do this?
** Make a simple maze solver
** Remove OLED stuff, clean up prints

** tweak movement constants
** DONE implement getch and getche
** more robust serial handling (avoid losing characters)
 - e.g. during pauses (make a serial buffer function)

** DONE allow entry of terminal mode from waiting for run
** quit wall follower mode when key or button is pressed
** allow sensor and/or move mode 
** why does move mode pause?
 - PR is being changed

** Tidy up variables at top - some surely could be local variables?
** [#A] Read C compiler manual - limitations on local variables
** DONE const vs. non-const allocation
** Read language tools manual
** SPI RAM read/write
- would allow logging of complex data quickly
- e.g. speed vs. sensors, etc. 
- PID controller
--- speed and position stablisation

** Warm start vs. power on detection, preserve maze map variable, etc.
** -----------------------------------------------
** 1. Remove tick1 tick2 and existing time-out code
** 2. Fix indent.
** 3. Test display code
** 4. Figure out if tests works (LBUT / RBUT on start)
** 5. Look at before main loop starts (beginning on main())
** 6. Look at proper running code
** 7. Figure out rest of wall follower code
** 8. Look at sensor code
** 9. Test on track
** 10. Fix wobble
** 11. Look at wall follower
** Switch display controls optionally to BT serial view
*** DONE Program serial terminal changes
*** Test display control changes
*** Any modification required?
** Get all sensors working
*** What sensors are displayed?
*** Add in extra sensor code
*** Test all sensors
* Future To Do
** dsPIC PID control library
** slips on back under of mouse
** Test motors
** Test SPI SRAM
** Test battery
** Check delays with delay variable (volatile required for optimisation?)
** test LEDs
** Program Modes
How do button A, button B, sensors and 3 LEDs interoperate?
*** Wall follower mode
*** Mouse Test mode
- Sensor test read mode?
- motor test read mode?
- battery read mode?
*** Maze solver mode
* Done
